<Window x:Class="AMD.Util.View.WPF.UserControls.DebugPanel1"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:vConverter="clr-namespace:AMD.Util.View.WPF.ValueConverters"
        mc:Ignorable="d"
        AllowsTransparency="True"
        Background="Transparent"
        WindowStyle="None"
        ShowActivated="False"
        Title="DebugPanel"
        ResizeMode="NoResize"
        MinWidth="00"
        MinHeight="50"
        Width="0"
        Loaded="Window_Loaded"
        MouseLeftButtonDown="Window_MouseLeftButtonDown"
        ShowInTaskbar="False">
  <Window.Resources>
    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../AMDIconsRD.xaml" />
        <ResourceDictionary Source="../AMDStylesRD.xaml" />
      </ResourceDictionary.MergedDictionaries>
      <vConverter:LogMsgTypeToColorConverter x:Key="logMsgToColor" />
      <vConverter:ListViewItemIndexToStringConverter x:Key="lviIndexToString" />

      <Style TargetType="GridViewRowPresenter">
        <Setter Property="VerticalAlignment" Value="Stretch" />
      </Style>

      <Style TargetType="Paragraph">
        <Setter Property="Margin" Value="0" />
      </Style>

      <Style TargetType="ScrollBar" BasedOn="{StaticResource ScrollBarAppleStyle}" />

      <Style TargetType="ScrollViewer" BasedOn="{StaticResource ScrollViewerInvisSquare}" />

      <Style TargetType="TextBlock">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Margin" Value="0, 0, 0, 5" />
      </Style>

      <Style TargetType="ToggleButton" BasedOn="{StaticResource ToggleSwitchStyleNoTextDark}">
        <Setter Property="Width" Value="18" />
        <Setter Property="Margin" Value="5, 0, 25, 0" />
        <Setter Property="HorizontalAlignment" Value="Center" />
      </Style>

      <Style x:Key="StyleHideButton" TargetType="Canvas">
        <Setter Property="Background" Value="{Binding BrushBackground}" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Width" Value="25" />
        <Setter Property="Opacity" Value="0.3" />
        <Style.Triggers>
          <Trigger Property="IsMouseOver" Value="True">
            <Setter Property="Opacity" Value="1" />
          </Trigger>
        </Style.Triggers>
      </Style>
    </ResourceDictionary>
  </Window.Resources>
  <Border CornerRadius="0, 5, 5, 0" Background="{Binding BrushBackground}">
    <Grid Margin="2, 5">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" MaxHeight="90" />
        <RowDefinition Height="*" />
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
        <ColumnDefinition />
        <ColumnDefinition Width="5" />
      </Grid.ColumnDefinitions>
      <StackPanel Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="2" Orientation="Horizontal">
        <Grid>
          <Grid.RowDefinitions>
            <RowDefinition />
            <RowDefinition />
          </Grid.RowDefinitions>
          <TextBlock Grid.Row="0" Text="Debug" />
          <ToggleButton Name="tbDebug" Grid.Row="1" IsChecked="True" Click="tbDebug_Click" />
        </Grid>
        <Grid>
          <Grid.RowDefinitions>
            <RowDefinition />
            <RowDefinition />
          </Grid.RowDefinitions>
          <TextBlock Grid.Row="0" Text="Notify" />
          <ToggleButton Name="tbNotify" Grid.Row="1" IsChecked="True" Click="tbNotify_Click" />
        </Grid>
        <Grid>
          <Grid.RowDefinitions>
            <RowDefinition />
            <RowDefinition />
          </Grid.RowDefinitions>
          <TextBlock Grid.Row="0" Text="Serial" />
          <ToggleButton Name="tbSerial" Grid.Row="1" IsChecked="True" Click="tbSerial_Click" />
        </Grid>
        <Grid>
          <Grid.RowDefinitions>
            <RowDefinition />
            <RowDefinition />
          </Grid.RowDefinitions>
          <TextBlock Grid.Row="0" Text="Measurement" />
          <ToggleButton Name="tbMeasurement" Grid.Row="1" IsChecked="True" Click="tbMeasurement_Click" />
        </Grid>
        <Grid>
          <Grid.RowDefinitions>
            <RowDefinition />
            <RowDefinition />
          </Grid.RowDefinitions>
          <TextBlock Grid.Row="0" Text="Test" />
          <ToggleButton Name="tbTest" Grid.Row="1" IsChecked="True" Click="tbTest_Click" />
        </Grid>
        <Grid>
          <Grid.RowDefinitions>
            <RowDefinition />
            <RowDefinition />
          </Grid.RowDefinitions>
          <TextBlock Grid.Row="0" Text="Result" />
          <ToggleButton Name="tbResult" Grid.Row="1" IsChecked="True" Click="tbResult_Click" />
        </Grid>
        <Grid>
          <Grid.RowDefinitions>
            <RowDefinition />
            <RowDefinition />
          </Grid.RowDefinitions>
          <TextBlock Grid.Row="0" Text="Warning" />
          <ToggleButton Name="tbWarning" Grid.Row="1" IsChecked="True" Click="tbWarning_Click" />
        </Grid>
        <Grid>
          <Grid.RowDefinitions>
            <RowDefinition />
            <RowDefinition />
          </Grid.RowDefinitions>
          <TextBlock Grid.Row="0" Text="Error" />
          <ToggleButton Name="tbError" Grid.Row="1" IsChecked="True" Click="tbError_Click" />
        </Grid>
        <Grid>
          <Grid.RowDefinitions>
            <RowDefinition />
            <RowDefinition />
          </Grid.RowDefinitions>
          <TextBlock Grid.Row="0" Text="Exception" />
          <ToggleButton Name="tbException" Grid.Row="1" IsChecked="True" Click="tbException_Click" />
        </Grid>
      </StackPanel>
      <Canvas Grid.Row="0" Style="{DynamicResource StyleHideButton}" MouseLeftButtonDown="Canvas_MouseLeftButtonDown" >
        <Path Name="bthHide" Fill="Transparent" StrokeLineJoin="Round" Stroke="{StaticResource ConsoleGreen}" StrokeThickness="6" Data="M15,5 l-10,10 l10,10 c2,2 4,0 2,-2 l-8,-8 l8,-8 c2,-2 0,-4 -2,-2 z " />
      </Canvas>
      <!--<ScrollViewer.Resources>
					<Style TargetType="Rectangle">
						<Style.Triggers>
							<EventTrigger RoutedEvent="Loaded">
								<BeginStoryboard>
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Background">
											<DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Transparent" />
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</BeginStoryboard>
							</EventTrigger>
						</Style.Triggers>
					</Style>
				</ScrollViewer.Resources>-->
      <ListView Name="lvLog" Grid.Column="0" Grid.Row="1" Background="Transparent" BorderThickness="0" ScrollViewer.HorizontalScrollBarVisibility="Hidden">
        <ListView.ItemContainerStyle>
          <Style TargetType="ListViewItem">
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Margin" Value="0"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="FontFamily" Value="InputMono" />
            <!--<Setter Property="ToolTip" Value="{Binding Message}" />-->
            <!--<Setter Property="VerticalAlignment" Value="Stretch" />-->
            <Style.Triggers>
              <Trigger Property="IsMouseOver" Value="True">
                <!--<Setter Property="Background" Value="#FF5080FF" />-->
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                      <Border BorderBrush="Transparent" BorderThickness="0" Background="#20FFFFFF" Margin="1">
                        <GridViewRowPresenter HorizontalAlignment="Stretch" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="Auto" Margin="0" Content="{TemplateBinding Content}"/>
                      </Border>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Trigger>
              <Trigger Property="IsSelected" Value="True">
                <!--<Setter Property="Background" Value="#33EECC00" />-->
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                      <Border BorderBrush="Transparent" BorderThickness="0" Background="#30FFFFFF" Margin="1">
                        <GridViewRowPresenter HorizontalAlignment="Stretch" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="Auto" Margin="0" Content="{TemplateBinding Content}"/>
                      </Border>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Trigger>
            </Style.Triggers>
          </Style>
        </ListView.ItemContainerStyle>
        <ListView.Resources>
          <Style TargetType="GridViewColumnHeader">
            <Setter Property="Height" Value="0" />
            <Setter Property="FrameworkElement.Visibility" Value="Collapsed" />
          </Style>
          <!--This is to align content to top in event of multi-line text-->
          <Style TargetType="ContentPresenter">
            <Style.Triggers>
              <EventTrigger RoutedEvent="Loaded">
                <BeginStoryboard>
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="VerticalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0">
                        <DiscreteObjectKeyFrame.Value>
                          <VerticalAlignment>Top</VerticalAlignment>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </BeginStoryboard>
              </EventTrigger>
            </Style.Triggers>
          </Style>
        </ListView.Resources>

        <ListView.CommandBindings>
          <CommandBinding Command="ApplicationCommands.Copy" CanExecute="CommandBinding_CanExecute" />
        </ListView.CommandBindings>

        <ListView.View>
          <GridView>
            <GridViewColumn x:Name="col0" Width="50">
              <GridViewColumn.CellTemplate>
                <DataTemplate>
                  <TextBlock Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Converter={StaticResource lviIndexToString}}" Foreground="White" />
                </DataTemplate>
              </GridViewColumn.CellTemplate>
            </GridViewColumn>
            <GridViewColumn x:Name="col1" Width="80">
              <GridViewColumn.CellTemplate>
                <DataTemplate>
                  <TextBlock Text="{Binding LogTime}" Foreground="{StaticResource ConsoleOrange}" />
                </DataTemplate>
              </GridViewColumn.CellTemplate>
            </GridViewColumn>
            <GridViewColumn x:Name="col2" Width="80">
              <GridViewColumn.CellTemplate>
                <DataTemplate>
                  <TextBlock Text="{Binding MessageType}" Foreground="{Binding MessageType, Converter={StaticResource logMsgToColor}}" />
                </DataTemplate>
              </GridViewColumn.CellTemplate>
            </GridViewColumn>
            <GridViewColumn Width="{Binding ElementName=ColumnWidthHelper, Path=ActualWidth}">
              <GridViewColumn.CellTemplate>
                <DataTemplate>
                  <TextBlock Text="{Binding Message}" TextWrapping="Wrap" Foreground="White" />
                </DataTemplate>
              </GridViewColumn.CellTemplate>
            </GridViewColumn>
          </GridView>
        </ListView.View>
      </ListView>
      <Grid Grid.Column="0" Grid.Row="1" Visibility="Hidden">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="{Binding ElementName=col0, Path=Width}" />
          <ColumnDefinition Width="{Binding ElementName=col1, Path=Width}" />
          <ColumnDefinition Width="{Binding ElementName=col2, Path=Width}" />
          <ColumnDefinition Width="*" />
          <!--Correction Width to avoid hiding behind scrollbar-->
          <ColumnDefinition Width="15"/>
        </Grid.ColumnDefinitions>
        <Control Name="ColumnWidthHelper" Grid.Column="3" />
      </Grid>
      <Thumb Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" VerticalAlignment="Stretch" Background="Transparent" MouseEnter="Thumb_MouseEnter" MouseLeave="Thumb_MouseLeave" DragDelta="Thumb_DragDelta">
        <Thumb.Template>
          <ControlTemplate>
            <Grid HorizontalAlignment="Stretch" Background="Transparent">
              <Canvas Background="Transparent" VerticalAlignment="Center">
                <Path Stroke="Gray" StrokeThickness="0.5" VerticalAlignment="Center" Data="M2,-50 v100 z" />
                <Path Stroke="Gray" StrokeThickness="0.5" Data="M6,-50 v100 z" />
              </Canvas>
            </Grid>
          </ControlTemplate>
        </Thumb.Template>
      </Thumb>
    </Grid>
  </Border>
</Window>
